<template>
  <view class="info">
    <button class="header" open-type="getUserInfo" bindgetuserinfo="getuserinfoEvent">
        <view class="header_content">
          <view wx:if="{{isLogin}}">
            <image class="avatarUrl" src="{{avatarUrl}}"></image>
            <view class="nickName cfff">{{nickName}}</view>
          </view>
          <view wx:else @tap="loginEvent()">
            <view class="avatarUrl"></view>
            <view class="nickName cfff">点我登陆</view>
          </view>
        </view>
      </button>
    <button class="regist_button" @tap="registEvent()" wx:if="{{isLogin&&!isUser}}">点我申请店铺~</button>
    <view wx:if="{{isUser}}">
      <view class="info_block">
        <navigator class="item" url="/pages/store_page?storeid={{openid}}&isOwner={{isOwner}}">
          <view class="item_content">
            <image class="item_img" src="../images/icon_my_02.png"></image>
            <view class="text">我的商铺</view>
          </view>
          <view class="arrow">&gt;</view>
        </navigator>
        <navigator class="item" url="/pages/upload">
          <view class="item_content">
            <image class="item_img" src="../images/icon_my_02.png"></image>
            <view class="text">上传商品</view>
          </view>
          <view class="arrow">&gt;</view>
        </navigator>
      </view>
      <view class="info_block">
        <navigator class="item" url="/pages/register?store_name={{registedUserDetail.store_name}}&contact={{registedUserDetail.contact}}&introduction={{registedUserDetail.introduction}}&name={{registedUserDetail.name}}&grade={{registedUserDetail.grade}}&graduation={{registedUserDetail.graduation}}&major={{registedUserDetail.major}}">
          <view class="item_content">
            <image class="item_img" src="../images/icon_my_02.png"></image>
            <view class="text">商铺设置</view>
          </view>
          <view class="arrow">&gt;</view>
        </navigator>
        <navigator class="item" url="/pages/about">
          <view class="item_content">
            <image class="item_img" src="../images/icon_my_05.png"></image>
            <view class="text">关于我们</view>
          </view>
          <view class="arrow">&gt;</view>
        </navigator>
        <navigator class="item" url="/pages/license">
          <view class="item_content">
            <image class="item_img" src="../images/icon_my_05.png"></image>
            <view class="text">软件协议</view>
          </view>
          <view class="arrow">&gt;</view>
        </navigator>
      </view>
    </view>
  </view>
</template>
<script>
  import wepy from "wepy";
  import api from "../api/api";
  import apiList from "../api/apiList";
  import tip from "../utils/tip";
  import {
    USER_INFO,
    USER_SPECICAL_INFO
  } from "../utils/constant";
  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: "我的"
    };
    components = {};
    data = {
      avatarUrl: "",
      nickName: "",
      bShowBind: false,
      isLogin: false,
      isUser: false,
      openid: "",
      isOwner: true,
      registedUserDetail: null,
    };
    async onLoad() {}
    async onShow() {
      // this.onShow();
      let that = this;
      await that.setLoginState();
      that.openid = await wepy.getStorageSync('openid');
      that.$apply();
      console.log(this.openid);
    }
    async setLoginState() {
      tip.loading();
      let that = this;
      let userInfo = wepy.getStorageSync(USER_INFO);
      console.log(userInfo);
      if (userInfo) {
        that.avatarUrl = userInfo.avatarUrl;
        that.nickName = userInfo.nickName;
        that.openid = userInfo.openid;
        that.isLogin = true;
        const registedUserDetail = await apiList.getUserDetail();
        //用户尚未注册商户
        console.log("registedUserDetail in info", registedUserDetail);
        if (registedUserDetail.statusCode >= 400) {
          console.log("普通用户");
          that.isUser = false;
        } else {
          that.isUser = true;
          that.registedUserDetail = registedUserDetail.data;
        }
      }
      that.$apply();
      tip.loaded();
    }
    askForUserDetail() {
      const recordUserDetail = async(code, rawData, signature) => {
        let that = this;
        console.log("登陆");
        const openid = await apiList.login(code);
        that.openid = openid;
        await wepy.setStorageSync('openid', openid);
        await wepy.setStorageSync('rawData', rawData);
        await wepy.setStorageSync('signature', signature);
        that.setLoginState();
        that.$apply();
      };
      wx.login({
        success: async function(res) {
          var code = res.code;
          wx.getUserInfo({
            success: function(res) {
              // 当用户授权成功的时候，保存用户的登录信息
              wepy.setStorageSync(USER_INFO, res.userInfo);
              recordUserDetail(code, res.rawData, res.signature);
            },
            fail: function(res) {
              //用户点了“拒绝”用户点了“拒绝”
              console.log("res", res)
              wx.showModal({
                title: "小提示",
                content: "需要获得您的头像和昵称才能继续，是否重新设置权限",
                success: function(res) {
                  if (res.confirm) {
                    wepy.openSetting({
                      success: res => {
                        if (res.authSetting["scope.userInfo"]) {
                          wepy.setStorageSync(USER_INFO, res.userInfo);
                          recordUserDetail(code, res.rawData, res.signature);
                        } else {
                          // 如果成功打开授权
                        } // 如果用户依然拒绝授权
                      },
                      fail: function() {
                        //调用失败，授权登录不成功
                        fail();
                      }
                    });
                  } else if (res.cancel) {
                    console.log("用户点击取消");
                  }
                }
              }); // 向用户提示需要权限才能继续
            }
          });
        }
      });
    }
    computed = {};
    methods = {
      loginEvent() {
        this.askForUserDetail();
      },
      getuserinfoEvent: function(res) {
        const recordUserDetail = async(code, rawData, signature) => {
          let that = this;
          console.log("登陆");
          const openid = await apiList.login(code);
          that.openid = openid;
          await wepy.setStorageSync('openid', openid);
          await wepy.setStorageSync('rawData', rawData);
          await wepy.setStorageSync('signature', signature);
          that.setLoginState();
          that.$apply();
        };
        console.log(res)
        if (!this.isLogin) {
          wepy.setStorageSync(USER_INFO, res.detail.userInfo);
          wx.login({
            success: async function(res) {
              var code = res.code;
              recordUserDetail(code, res.rawData, res.signature);
            }
          });
        }
      },
      async registEvent() {
        this.askForUserDetail();
        if (this.isLogin) {
          wx.navigateTo({
            url: `register`
          })
        }
      }
    };
    events = {};
  }
</script>
<style lang="less">
  .header {
    background: #6958ff;
    height: 350rpx;
    width: 690rpx;
    margin: 30rpx;
    border-radius: 20rpx;
    box-shadow: 0 10px 50px rgba(105, 88, 255, 0.486);
  }
  .header_content {
    width: 100%;
    margin: 0 auto;
    text-align: center;
    padding-top: 80rpx;
  }
  .avatarUrl {
    width: 122rpx;
    height: 122rpx;
    margin: 0 auto;
    border-radius: 1000px;
    background: white;
  }
  .nickName {
    font-size: 30rpx;
    padding-top: 15rpx;
  }
  .regist_button {
    margin: 30rpx auto;
    width: 690rpx;
    color: white;
    font-size: 30rpx; // padding: 25rpx 0;
    border-radius: 15rpx;
    text-align: center;
    background-image: linear-gradient(-20deg, #01b698 0%, #7ee6df 100%);
    border: none;
    box-shadow: 0 1px 10px rgba(126, 230, 223, 0.685);
  }
  .info_block {
    margin-top: 10rpx;
    .item {
      border-top: 1rpx solid #dbdbdb;
      background: #fff;
      padding: 34rpx 28rpx;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    .item:last-child {
      border-bottom: 1rpx solid #dbdbdb;
    }
    .item_content {
      display: flex;
      align-items: center;
      .text {
        margin-left: 20rpx;
        color: #1a1a1a;
      }
    }
    .item_img {
      width: 42rpx;
      height: 42rpx;
    }
    .arrow {
      color: #cccccc;
      font-size: 32rpx;
    }
    .tip {
      color: #999;
      font-size: 24rpx;
      margin-top: 20rpx;
      margin-left: 60rpx;
    }
  }
</style>
