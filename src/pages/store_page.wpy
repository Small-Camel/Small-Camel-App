<template>
  <view class="container">
    <view class="store_intro">
      <image class="avatarUrl" src="{{detail.avatar}}"></image>
      <view class="store_text">
        <view class="store_name">{{detail.store_name}}</view>
        <view>{{detail.introduction||"店家有些懒，什么也没写~~"}}</view>
      </view>
    </view>
    <view class="recommend-title">商铺商品</view>
    <view class="store_list">
      <!--矩阵商品列表模块-->
      <shopGridList :purchasetype.sync="purchasetype" :list.sync="list" :selectable.sync="selectable" :selectedList.sync="selectedList"></shopGridList>
      <!--加载更多时动画-->
      <bottomLoadMore :show.sync="showLoading" message="正在加载"></bottomLoadMore>
      <!--暂无数据显示-->
      <placeholder :show.sync="is_empty" message="暂无发现数据"></placeholder>
    </view>
    <button wx:if="{{showDeleteButton}}" class="delete-button" type="warn" loading="{{deleteLoading}}" bindtap="deleteSelectedCommodity"> 下架选中商品 </button>
    <!--暂无数据显示-->
    <!-- <placeholder :show.sync="is_empty" message="暂无发现数据"></placeholder> -->
  </view>
</template>

<script>
  import wepy from "wepy";
  import apiList from "../api/apiList"
  import api from "../api/api";
  import tip from "../utils/tip";
  import ShopGridList from '../components/shop_grid_list'
  import Bombscreen from "../components/bomb_screen";
  import BottomLoadMore from "../components/common/bottomLoadMore";
  import Placeholder from "../components/common/placeholder";
  export default class Home extends wepy.page {
    config = {
      navigationBarTitleText: "商铺详情"
    };
    components = {
      bottomLoadMore: BottomLoadMore,
      placeholder: Placeholder,
      bombscreen: Bombscreen,
      shopGridList: ShopGridList
    };
    data = {
      //openid;
      openid: "",
      //店主数据
      detail: {},
      //swiper
      indicatorDots: true,
      autoplay: true,
      interval: 3000,
      duration: 1500,
      list: [],
      purchasetype: 1,
      indicatorActiveColor: "#fff",
      //是否有数据
      is_empty: false,
      //当前页面
      currentPage: 0,
      //总页数
      totalPages: 0,
      //是否显示 底部loading
      showLoading: true,
      //防止重复加载
      preventRepeatRequest: false,
      //广告列表
      adList: [],
      tps: 0,
      is_show_alert: true,
      selectable: false,
      selectedList: [],
      showDeleteButton: false
    };
    watch = {
      selectedList(newValue, oldValue) {
        if (newValue.length >= 1) {
          this.showDeleteButton = true;
        } else {
          this.showDeleteButton = false;
        }
        console.log("newValue", newValue)
        console.log("showDeleteButton", this.showDeleteButton);
      }
    }
    //获得店铺信息
    async getStoreDetail(openid) {
      let that = this;
      const json = await apiList.getStoreDetail(openid);
      that.detail = json;
      that.$apply();
    }
    //获得商品列表
    async getGoodList(currentPage, size, openid) {
      let that = this;
      //const json = await api.getGoodsList({
      const json = await apiList.getCommodityList({
        page: currentPage || 0,
        size: size || 10,
        openid: openid || this.openid,
        // cateCode: this.catCode,
        // sort: this.sort,
        // skuval: this.skuval
      });
      const selectedList = that.selectedList.slice(0);
      console.log("selectedList", selectedList);
      that.list.map(e => {
        console.log("selectedList", selectedList.indexOf(e));
        if (selectedList.indexOf(e.commodityid) >= 0) {
          e.selected = true;
        }
        return e;
      })
      that.list = [...that.list, ...json.content];
      that.selectedList = selectedList;
      that.totalPages = json.totalPages;
      if (json.totalElements == 0) {
        //暂无数据
        that.is_empty = true;
      }
      that.showLoading = false;
      that.$apply();
    }
    onLoad(option) {
      this.openid = option.openid;
      this.selectable = option.isOwner;
      console.log(option.isOwner);
      this.getStoreDetail(option.openid);
      this.getGoodList(0, 10, option.openid);
    };
    computed = {};
    methods = {
      deleteSelectedCommodity() {
        // const contentText
        wx.showModal({
          title: "下架商品",
          content: `您选中了${this.selectedList.length}件商品，是否继续`,
          success: async function(res) {
            if (res.confirm) {
              
            } else if (res.cancel) {
              console.log("用户点击取消");
            }
          }
        });
      },
      onShopListTap() {
        console.log(this.list)
      },
      goToAdvert(url) {
        console.log("url===" + url);
        if (url.length == 0) {
          return;
        }
        wepy.navigateTo({
          url: url
        });
      },
      onShareAppMessage: function(res) {
        if (res.from === "button") {
          // 来自页面内转发按钮
          console.log(res.target);
        }
        return {
          title: "小骆驼",
          path: "/pages/home",
          success: function(res) {
            // 转发成功
          },
          fail: function(res) {
            // 转发失败
          }
        };
      },
      alertCallback() {
        tip.alert("跳转");
      },
      closeAlert() {
        tip.alert("关闭");
      }
    };
    events = {};
    //加载更多优惠商品
    onReachBottom() {
      let that = this;
      that.showLoading = true;
      console.log(that.totalPages + "===" + that.currentPage);
      //判断总页数是否大于翻页数
      if (that.totalPages > that.currentPage) {
        //防止重复加载
        if (that.preventRepeatRequest) {
          return true;
        }
        that.preventRepeatRequest = true;
        that.currentPage++;
        that.getGoodList(that.currentPage);
        that.preventRepeatRequest = false;
      } else {
        that.showLoading = false;
      }
      that.$apply();
    }
  }
</script>

<style lang="less">
  .store_intro {
    width: 600rpx;
    margin: 50rpx auto;
    background: white;
    border-radius: 10rpx;
    box-shadow: 0 10rpx 50rpx rgba(0, 0, 0, 0.055);
    display: flex;
    flex: 1 1 0%;
    .store_text {
      flex: 1 1 0%;
      margin: 30rpx;
      margin-left: 0;
    }
    view {
      font-size: 25rpx;
      margin-bottom: 20rpx;
    }
    .store_name {
      font-size: 30rpx;
      font-weight: bold;
      color: black;
      margin-bottom: 20rpx;
    }
    .avatarUrl {
      width: 110rpx;
      height: 110rpx;
      margin: 30rpx;
      border-radius: 1000px;
      background: white;
    }
  }
  .pos {
    // position: fixed;
    background: white;
    padding: 20rpx 0;
    width: 100%;
    .search_read_only .search_content {
      width: 100%;
    }
  }
  .nav_list {
    color: #404040;
    display: flex;
    font-size: 26rpx;
    justify-content: space-between;
    padding: 17rpx 50rpx;
    navigator {
      text-align: center;
    }
    .nav_icon {
      height: 80rpx;
      margin: 0 auto;
      width: 80rpx;
      margin-bottom: 14rpx;
    }
    .nav_text {
      font-size: 26rpx;
    }
  }
  .recommend-title {
    padding: 40rpx 0;
    text-align: center;
    color: #333;
  }
  .container {
    background: transparent;
  }
  .delete-button {
    border-radius: 0;
    position: fixed;
    left: 0;
    bottom: 0;
    right: 0;
  }
  .store_list {
    margin-bottom: 130rpx
  }
</style>
