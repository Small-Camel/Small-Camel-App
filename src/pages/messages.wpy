
<!--我的消息-->
<template>
  <view class="messages">

    <scroll-view scroll-y="true" class="swiper-item-box" style="height:{{winHeight}}px" bindscrolltolower="onReachBottom">
     <repeat for="{{list}}" key="index" index="index" item="item">
      <view class="list_block">
        <view class="list_item">
          <view class="list_header">
            <i class="iconfont icon-message"></i>
            <view class="header_title">
              <text class="time">{{item.title}}</text>
              <text class="doc">{{item.roundup}}</text>
            </view>
          </view>
          <view class="list_content">
          {{item.detail}}
            </view>
          <view class="list_footer">
            {{item.createTime}}
          </view>
        </view>
      </view>
        </repeat>
        <!--加载更多时动画-->
        <bottomLoadMore :show.sync="showLoading" message="正在加载"></bottomLoadMore>
        <!--暂无数据显示-->
        <placeholder :show.sync="is_empty" message="暂无消息"></placeholder>
    </scroll-view>
  </view>
</template>

<script>
import wepy from 'wepy';
import api from '../api/api';
import BottomLoadMore from "../components/common/bottomLoadMore"
import Placeholder from "../components/common/placeholder"
import {
  SYSTEM_INFO,
  USER_SPECICAL_INFO
} from '../utils/constant';
export default class Messages extends wepy.page {
  config = {
    navigationBarTitleText: '我的消息',
  }
  components = {
    bottomLoadMore: BottomLoadMore,
    placeholder: Placeholder
  }
  data = {
    list: [],
    winHeight: 0,
    //当前页面
    currentPage: 1,
    //总页数
    page_total: 0,
    //是否显示 底部loading
    showLoading: true,
    //防止重复加载
    preventRepeatReuqest: false,
    is_empty: false
  }

   async getUserMessage(currentPage, size) {
    let that = this;
    let userSpecialInfo = wepy.getStorageSync(USER_SPECICAL_INFO) || {};
    let openId = userSpecialInfo.openid;
    const json = await api.messageInfo({
      query: {
        openId: openId,
        page: currentPage || 1,
        size: size || 10
      }
    });
    if (json.data.code == 0) {
      that.list = [...that.list, ...json.data.list];
      that.page_total = json.data.page_total;
      if (json.data.page_total == 0) {
        //暂无数据
         that.is_empty = true;
      }
    } else {
      tip.error(json.data.msg)
    }
    that.showLoading = false;
     that.$apply();
  }
  onLoad() {
    let that = this;
    this.list = [];
    //设置滚动高度
    let systemInfo = wepy.getStorageSync(SYSTEM_INFO);
    that.winHeight = systemInfo.windowHeight;
    that.getUserMessage();

  }
  computed = {

  }
  methods = {


  }
  events = {

  }
  //加载更多
  onReachBottom() {
    console.log("ddddddddddddddd");
    let that = this;
    that.showLoading = true;
    console.log(that.page_total + "===" + that.currentPage);
    //判断总页数是否大于翻页数
    if ((that.page_total) > that.currentPage) {
      console.log(" //判断总页数是否大于翻页数");
      //防止重复加载
      if (that.preventRepeatReuqest) {
        return true;
      }
      that.preventRepeatReuqest = true;
      that.currentPage++;
      that.getUserMessage(that.currentPage);
      that.preventRepeatReuqest = false;
    } else {
      that.showLoading = false;
    }
  };
}

</script>
<style lang="less">
.list_block {
  padding: 27rpx;
}

.list_item {
  background: #fff;
  padding: 0rpx 28rpx;
  border-radius: 20rpx;
}

.list_header {
  font-size: 28rpx;
  padding: 20rpx 0rpx;
  border-bottom: 1px solid #e6e6e6;
  display: flex;
  align-items: center;
  .time {
    color: #000;
  }
  .doc {
    color: #000;
    margin-left: 10rpx;
  }
}

.list_content {
  font-size: 26rpx;
  color: #f71e1e;
  padding-top: 23rpx;
}

.list_footer {
  text-align: right;
  font-size: 22rpx;
  color: #999999;
  height: 70rpx;
  line-height: 70rpx;
}

</style>
